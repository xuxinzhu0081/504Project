/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package playlistapp;

import java.awt.Label;
import java.awt.TextComponent;
import java.awt.event.KeyEvent;
import java.awt.im.InputContext;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import static playlistapp.CachedTrie.findSubstring;
import static playlistapp.ParseAgain.playListMap;
import static playlistapp.ParseAgain.songMap;
import static playlistapp.load.playListMap_day;
import static playlistapp.writeToFile.writeTop1024;

/**
 *
 * @author Xinzhu
 */
public class testSwing extends javax.swing.JFrame {

    private DefaultListModel listModel;
    private DefaultListModel listModel_128;
    private File uploadedFile;


    /**
     * Creates new form testSwing
     */
    public testSwing() throws IOException {
     
       
        ParseAgain.runParsing();
        GetSongHeat.getSongHeat();
        maintain1024.InitMaxMinHeap();
        writeTop1024();
        maintain1024.getTop8();
        maintain1024.getTop128();
        CachedTrie.constructTree();

        
        initComponents();
        loadTop8();
        loadTop128();
        //songNameKeyType();
        
    }
    public void update(){
        
    
    }
    public void loadTop128(){
         listModel_128=new DefaultListModel();
         int [] temp= maintain1024.top128;
         System.out.println(temp[0]);
              
         for(int i=0;i<128;i++){
            
             
           StringBuilder sb=new StringBuilder();
           Vector<Integer> songList=playListMap.get(temp[i]);
           int heat=songList.elementAt(0);
           sb.append(Integer.toString(heat));  
           sb.append(" : ");

           for(int j=1;j<songList.size();j++){
                String cell=songMap.get(songList.get(j)). replace("&"," and ");     
                sb.append(cell);
                sb.append(" , ");
            }
           sb.append("/n");
           
           String playlist=sb.toString();
            
           listModel_128.addElement(playlist);
           
            
        }
            
        topList128.setModel(listModel_128);
        
    }
    public void loadTop8(){
 
        listModel=new DefaultListModel();
       
        int[] temp=maintain1024.top8;
        for(int i=0;i<8;i++){
           StringBuilder sb=new StringBuilder();
           Vector<Integer> songList=playListMap.get(temp[i]);
           for(int j=1;j<songList.size();j++){
                String cell=songMap.get(songList.get(j)). replace("&"," and ");     
                sb.append(cell);
                sb.append(" , ");
            }
           String playlist=sb.toString();
            
           listModel.addElement(playlist);
        }
            
        topList.setModel(listModel);

    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        top4 = new javax.swing.JDialog();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        top8_button = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        topList128 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        Upload = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        songName = new javax.swing.JTextField();
        newPlayList = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        suggest = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        topList = new javax.swing.JList<>();
        label = new javax.swing.JLabel();
        SongField = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        topPlayList = new javax.swing.JTextArea();
        heatInput = new javax.swing.JTextField();

        javax.swing.GroupLayout top4Layout = new javax.swing.GroupLayout(top4.getContentPane());
        top4.getContentPane().setLayout(top4Layout);
        top4Layout.setHorizontalGroup(
            top4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        top4Layout.setVerticalGroup(
            top4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        top8_button.setText("Update");
        top8_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                top8_buttonActionPerformed(evt);
            }
        });

        topList128.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(topList128);
        topList128.getAccessibleContext().setAccessibleName("topList128");

        jLabel1.setText("Top128");

        Upload.setText("Upload");
        Upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UploadActionPerformed(evt);
            }
        });

        jButton2.setText("Add");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        songName.setText("songName");
        songName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songNameActionPerformed(evt);
            }
        });

        newPlayList.setText("separate by -");
        newPlayList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPlayListActionPerformed(evt);
            }
        });

        jLabel2.setText("Please select a file");

        topList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(topList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))
        );

        label.setText("  Top 8");

        jLayeredPane1.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(label, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        SongField.setText("search top playlist of song");

        Search.setText("search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        topPlayList.setColumns(20);
        topPlayList.setRows(5);
        jScrollPane1.setViewportView(topPlayList);

        heatInput.setText("Popularity");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLayeredPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(suggest, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Upload))
                                .addComponent(songName, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(newPlayList, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                                            .addComponent(top8_button, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(1, 1, 1)
                                    .addComponent(heatInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(92, 92, 92)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(SongField, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(Search))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Upload)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newPlayList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(heatInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(top8_button))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(songName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81)
                        .addComponent(suggest, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SongField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Search))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addGap(11, 11, 11)))
                .addGap(17, 17, 17))
        );

        songName.getAccessibleContext().setAccessibleName("songName");
        jLabel2.getAccessibleContext().setAccessibleName("uoloadLabel");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UploadActionPerformed
        // TODO add your handling code here:
        
	JFileChooser chooser = new JFileChooser();   
        chooser.setCurrentDirectory(new java.io.File("."));
	int returnVal = chooser.showOpenDialog(new JPanel());  
                      
	if(returnVal == JFileChooser.APPROVE_OPTION) {
            uploadedFile=chooser.getSelectedFile();
            try {
                userInput.uploadFile(uploadedFile); 
                /*
                System.out.println("file open: " +
                chooser.getSelectedFile().getName());
                */
            } catch (IOException ex) {
                Logger.getLogger(testSwing.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
       
    }//GEN-LAST:event_UploadActionPerformed

    private void songNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songNameActionPerformed
        // TODO add your handling code here:
        top4.setVisible(false);
        int a=evt.getID();
        String name=songName.getText();
        int res[]=CachedTrie.findSubstring(name);
        StringBuilder sb= new StringBuilder();
       sb.append("<HTML>");
        if(findSubstring(name)!=null){
            for(int i=0;i<res.length;i++){
		sb.append(songMap.get(res[i]));
                sb.append("<BR>");
               
            }
          
	}
        else{
            sb.append("no result found");
        }
        
        //sb.append("<");
       
       
        suggest.setText(sb.toString());
        
    }//GEN-LAST:event_songNameActionPerformed

    private void newPlayListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPlayListActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_newPlayListActionPerformed

    private void top8_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_top8_buttonActionPerformed
        // TODO add your handling code here:
        maintain1024.getTop8();
        maintain1024.getTop128();  
        loadTop8();
        loadTop128();
    }//GEN-LAST:event_top8_buttonActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
        topPlayList.setText(null);
        String songName=SongField.getText().replaceAll("[^A-Za-z]+", "").toLowerCase();
        songName.replaceAll(" ","");    
        System.out.println("song name is "+songName);
        int sid=-1;
        int pop;
        Iterator<Map.Entry<Integer,String>> songMapItr=songMap.entrySet().iterator();
        while(songMapItr.hasNext()){
            Map.Entry<Integer,String> entry =(Map.Entry<Integer,String>)songMapItr.next();
            String song=entry.getValue().replaceAll("[^A-Za-z]+", "").toLowerCase();
            song.replaceAll(" ", "");
            
            
            
            if(song.contentEquals(songName)){
               
                sid=entry.getKey();
               
            }
            
        
        }
        String playList;
        if(sid==-1) {
            playList="no song exist";
        }
        else{

            ParseAgain.SongCell cell=ParseAgain.songHeatMap.get(sid);
            pop=cell.popListID;
            
            Vector<Integer> songList=playListMap.get(pop);
            for(int j=1;j<songList.size();j++){
          
                String temp=songMap.get(songList.get(j)). replace("&"," and ");     
                topPlayList.append(temp);
                topPlayList.append("\n");
                
            }
            
            
        }
        
        
            
 
    }//GEN-LAST:event_SearchActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String playList=newPlayList.getText();
        int heat=Integer.parseInt(heatInput.getText());
        Vector<Integer> v=new Vector<Integer>();
        v.add(heat);
        System.out.println("heat is "+heat);
        
        
        String playListArr[]=playList.split("-");
        for(int i=0;i<playListArr.length;i++){
            
            try{
                int a=Integer.parseInt(playListArr[i]);
                System.out.println("sid is "+a);

                v.add(a);
            }
            catch(NumberFormatException e){
                System.out.println("error");
            }
             playListMap_day.put(0,v);
        }
        
        load.updateSongHeat();
        load.updateMinMaxHeap();
	load.updateTrieNode();
        
      
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(testSwing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(testSwing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(testSwing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(testSwing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
      
        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override public void run() {
                
               testSwing test;
                try {
                    test = new testSwing();
                    test.setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(testSwing.class.getName()).log(Level.SEVERE, null, ex);
                }
               
               
            }
        });
    
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Search;
    private javax.swing.JTextField SongField;
    private javax.swing.JButton Upload;
    private javax.swing.JTextField heatInput;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel label;
    private javax.swing.JFormattedTextField newPlayList;
    private javax.swing.JTextField songName;
    private javax.swing.JLabel suggest;
    private javax.swing.JDialog top4;
    private javax.swing.JButton top8_button;
    private javax.swing.JList<String> topList;
    private javax.swing.JList<String> topList128;
    private javax.swing.JTextArea topPlayList;
    // End of variables declaration//GEN-END:variables

    private void installKeyboardActions(JLabel testLabel) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
